
package cliente;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
/**
 *
 * @author David
 */
public class Cliente extends javax.swing.JFrame  {
    DefaultTreeModel model;
    private DefaultMutableTreeNode root;
    FTPClient client = new FTPClient();
    FileInputStream fis = null;
    DefaultTreeModel clientModel;
    String user;
    /**
     * Creates new form Cliente
     */
    public Cliente() {
        initComponents();
        clientTree.setEnabled(false);
        String path = System.getProperty("user.home") + "\\Documents";
        File fileRoot = new File(path);
        root = new DefaultMutableTreeNode(new FileNode(fileRoot));
        model = new DefaultTreeModel(root);

        jTree1.setModel(model);
        jTree1.setShowsRootHandles(true);
        CreateChildNodes ccn = 
                new CreateChildNodes(fileRoot, root);
        ccn.run();
        
    }
    
    private void createtree(String path){
        File fileRoot = new File(path);
        root = new DefaultMutableTreeNode(new FileNode(fileRoot));
         model = new DefaultTreeModel(root);

        jTree1.setModel(model);
        jTree1.setShowsRootHandles(true);
        CreateChildNodes ccn = 
                new CreateChildNodes(fileRoot, root);
        new Thread(ccn).run();
    }
    
    private void setClienteTree(String path){
        File fileRoot = new File(path);
        DefaultMutableTreeNode clientRoot = new DefaultMutableTreeNode(new FileNode(fileRoot));
         clientModel = new DefaultTreeModel(clientRoot);

        clientTree.setModel(clientModel);
        clientTree.setShowsRootHandles(true);
        clientTree.setEnabled(true);
        CreateChildNodes ccn = 
                new CreateChildNodes(fileRoot, clientRoot);
        new Thread(ccn).run();
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        btn_login = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name_tf = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientTree = new javax.swing.JTree();
        btn_logOut = new javax.swing.JButton();
        btn_download = new javax.swing.JButton();
        btn_upload = new javax.swing.JButton();
        pwd_tf = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTree1);

        btn_login.setText("Log In");
        btn_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loginActionPerformed(evt);
            }
        });

        jLabel2.setText("user:");

        jLabel3.setText("pass:");

        jScrollPane2.setViewportView(clientTree);

        btn_logOut.setText("Log out");
        btn_logOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logOutActionPerformed(evt);
            }
        });

        btn_download.setText("Descargar");
        btn_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_downloadActionPerformed(evt);
            }
        });

        btn_upload.setText("Subir");
        btn_upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_uploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(btn_upload)
                        .addGap(224, 224, 224)
                        .addComponent(btn_download))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(name_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pwd_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btn_login)
                        .addGap(18, 18, 18)
                        .addComponent(btn_logOut)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(btn_login)
                    .addComponent(btn_logOut)
                    .addComponent(pwd_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_upload)
                    .addComponent(btn_download))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    DefaultMutableTreeNode selectednode;
    private void btn_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loginActionPerformed
        //captura datos del cliente 
        String userName = name_tf.getText();
        String userPass = pwd_tf.getText();
        if(userName.equals("") || userPass.equals("")){
            JOptionPane.showMessageDialog(this, "Ingrese Datos para el login");
        }else{
            String ftp = "127.0.0.1";
             user = userName;
            String password = userPass;
        
        try{
            //levanta la conexión
            client.connect(ftp,21);
            
            //intenta hacer login
            boolean login = client.login(user, password);
            
            if(login){
                JOptionPane.showMessageDialog(this, "Conexión Exitosa");
                //obtengo el directorio
                //System.out.println(client.printWorkingDirectory());

                //crea la direccion del directorio
                String path = System.getProperty("user.home") + "\\Desktop\\ftp\\"+user;
                
                //metodo que crea el artbol del cliente
                setClienteTree(path);
                 
                //String directories = client.getLocalAddress().toString();
                 
                
            }else{
                JOptionPane.showMessageDialog(this, "Nombre o usuario Incorrecto");
            }
            
            
        } catch(IOException e){
            JOptionPane.showMessageDialog(this, "No hay conexión con el Servidor");
        }
        }
    }//GEN-LAST:event_btn_loginActionPerformed

    private void btn_logOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logOutActionPerformed
        //se cierra el usuario y conexion
        try {
            client.logout();
            client.disconnect();
            clientTree.setEnabled(false);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_btn_logOutActionPerformed

    private void btn_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_downloadActionPerformed
         try {
            //Toma el nodo seleccionado del arbol del cliente
            selectednode = (DefaultMutableTreeNode) clientTree.getLastSelectedPathComponent();

            //Captura la direccion hasta la root del arbol
            TreeNode[] tr = selectednode.getPath();

            //crea el path con la direccion completa
            String path = "";
            for(int i = 0; i<tr.length; i++ ){
                path += "/"+tr[i].toString();
            }

            client.setFileType(FTP.BINARY_FILE_TYPE);
            //archivo a descargar
            System.out.println("DE: "+path);
  
            String destino = System.getProperty("user.home")+ "\\Documents\\"+selectednode.toString();
            System.out.println(destino);
            OutputStream fos = new FileOutputStream(destino);
            
            
            //hace la descarga
            boolean success = client.retrieveFile( selectednode.toString(), fos);
            
            if(success){
                JOptionPane.showMessageDialog(this, "Se desgargó el archivo");
                String actualizado = System.getProperty("user.home") + "\\Documents";
                createtree(actualizado);
            }else{
                JOptionPane.showMessageDialog(this, "NO Se descargó el archivo");
            }
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_downloadActionPerformed

    private void btn_uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_uploadActionPerformed
        try {
            //toma el nodo seleccionado
            selectednode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            //captura la direccion del nodo hasta la raíz del árbol
            TreeNode[] tr = selectednode.getPath();

            //se crea el path con la direccion completa desde C:\
            String path = System.getProperty("user.home");
            for(int i = 0; i<tr.length; i++ ){
                path += "\\"+tr[i].toString();
            }
            
            
            System.out.println("A SUBIR: "+path );
            

            fis = new FileInputStream(path);
            client.setFileType(FTP.BINARY_FILE_TYPE);
            boolean result = client.storeFile(selectednode.toString() , fis);
            if(result){
                JOptionPane.showMessageDialog(this, "Se cargó el archivo");
                //crea la direccion del directorio
                String actualizado = System.getProperty("user.home") + "\\Desktop\\ftp\\"+user;
                
                //metodo que crea el artbol del cliente
                setClienteTree(actualizado);
            }else{
                JOptionPane.showMessageDialog(this, "NO Se cargó el archivo");
            }
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_uploadActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
    }
    
    
    public class FileNode {

        private File file;

        public FileNode(File file) {
            this.file = file;
        }

        @Override
        public String toString() {
            String name = file.getName();
            if (name.equals("")) {
                return file.getAbsolutePath();
            } else {
                return name;
            }
        }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_download;
    private javax.swing.JButton btn_logOut;
    private javax.swing.JButton btn_login;
    private javax.swing.JButton btn_upload;
    private javax.swing.JTree clientTree;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField name_tf;
    private javax.swing.JPasswordField pwd_tf;
    // End of variables declaration//GEN-END:variables

public class CreateChildNodes extends Thread   {

        private DefaultMutableTreeNode root;

        private File fileRoot;

        public CreateChildNodes(File fileRoot, 
                DefaultMutableTreeNode root) {
            this.fileRoot = fileRoot;
            this.root = root;
        }

        @Override
        public void run() {
            createChildren(fileRoot, root);
        }

        private void createChildren(File fileRoot, 
                DefaultMutableTreeNode node) {
            File[] files = fileRoot.listFiles();
            if (files == null) return;

            for (File file : files) {
                DefaultMutableTreeNode childNode = 
                        new DefaultMutableTreeNode(new FileNode(file));
                node.add(childNode);
                if (file.isDirectory()) {
                    createChildren(file, childNode);
                }
            }
        }

    }//CREATE CHILDREN CLASS


}
